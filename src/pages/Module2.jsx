export default function Module1() {
  const codigo1 = `
  try {
    // C√≥digo que pode gerar erro
  } catch (erro) {
    // C√≥digo que lida com o erro
  }
`;

  const codigo2 = `
  try {
    let resultado = 10 / 0;
    console.log("Resultado:", resultado);
  
    let user = JSON.parse('{"nome":"Maria"}'); // OK
    console.log(user.idade); // undefined
  
    let erro = JSON.parse("isso n√£o √© JSON"); // Erro aqui!
  } catch (erro) {
    console.log("Algo deu errado:", erro.message);
  }  
  `;

  const codigo3 = `function esperarSegundos(segundos) {
    return new Promise((resolve) => {
      setTimeout(() => {
        resolve('Esperou {segundos} segundos');
      }, segundos * 1000);
    });
  }
  
  async function executar() {
    console.log("Iniciando...");
    const mensagem = await esperarSegundos(2); // espera 2 segundos
    console.log(mensagem);
    console.log("Finalizado");
  }
  
  executar();`;

  return (
    <div>
      <h1 className="text-2xl mb-2">
        <strong>Sum√°rio</strong>
      </h1>
      <ul className="mb-6 space-y-2">
        <li>
          <a href="#cap1" className="text-blue-700 hover:underline">
            C√°p 1 - Lidando com futuro e possibilidades
          </a>
        </li>
        {/* <li>
            <a href="#cap2" className="text-blue-700 hover:underline">
              C√°p 2 - Introdu√ß√£o ao backend
            </a>
          </li>
          <li>
            <a href="#cap3" className="text-blue-700 hover:underline">
              C√°p 3 - Seu primeiro servidor
            </a>
          </li>
          <li>
            <a href="#cap4" className="text-blue-700 hover:underline">
              C√°p 4 - Criando um servidor Express + rotas
            </a>
          </li>
          <li>
            <a href="#cap5" className="text-blue-700 hover:underline">
              C√°p 5 - Refactoring de Modulariza√ß√£o
            </a>
          </li> */}
        {/* <li>
            <a href="#exemplos" className="text-blue-700 hover:underline">
              Exemplos
            </a>
          </li> */}
      </ul>

      <section className="max-w-3xl mx-auto px-4 py-8 text-gray-800">
        <h2 id="cap1" className="text-2xl font-bold mb-4">
          üìò Cap√≠tulo 1 ‚Äì Lidando com o futuro e possibilidades.
        </h2>

        <p className="mb-4">
          Gostou do nome do cap√≠tulo? A maior verdade que voc√™s v√£o enfrentar
          com desenvolvimento de software √© que ele √© imprevis√≠vel e mut√°vel.
          Voc√™ pode, em um exemplo hipot√©tico, bloquear que o nome de usu√°rio
          seja composto por n√∫meros ou caracteres especiais. E ent√£o, confiante
          na sua valida√ß√£o, voc√™ sobe isso para produ√ß√£o. N√£o esperava pela
          ast√∫cia de um usu√°rio com um teclado japon√™s que digita seus hiraganas
          e katakanas no formul√°rio, isso hipoteticamente gera um erro na
          grava√ß√£o do banco de dados e a sua aplica√ß√£o trava e √© desligada. Voc√™
          vai precisar de try/catch para lidar com "possibilidades".
        </p>

        <p className="mb-4">
          Seguindo nesses exemplos... Quando estamos programando localmente,
          tudo √© mil maravilhas, voc√™ faz uma requisi√ß√£o ao backend e ele te
          devolve em 1 milissegundo, incr√≠vel! No entanto, quando voc√™ sobe para
          produ√ß√£o, voc√™ pode ter que lidar, por exemplo, com o seu servidor do
          backend, com o servidor do banco de dados e com o servidor do
          frontend. Isso, sem d√∫vidas, pode atrasar uma requisi√ß√£o em poucos
          segundos que s√£o impercept√≠veis ao usu√°rio e suficientes para quebrar
          o seu c√≥digo. Afinal, imagine uma fun√ß√£o que depende da anterior mas a
          anterior nem aconteceu ainda, isso √© um problema. Voc√™ vai precisar
          lidar com o futuro e promessas de fun√ß√µes que nem sabe se dar√£o
          resultado, chamamos isso de fun√ß√£o ass√≠ncrona.
        </p>

        <h2 className="font-black text-2xl">Try...Catch</h2>
        <p className="mb-4">
          Em JavaScript, usamos o bloco try...catch para capturar e tratar erros
          que ocorrem durante a execu√ß√£o do c√≥digo. Ele evita que erros causem
          crash no programa, permitindo que voc√™ trate os problemas da sua forma
          (ex: mostrar uma mensagem de erro ao usu√°rio, tentar novamente etc.).
        </p>

        <pre className="bg-gray-900 text-gray-200 p-4 rounded-lg overflow-x-auto text-sm font-mono mb-4">
          <code>{codigo1}</code>
        </pre>

        <p className="mb-4">
          O c√≥digo pode quebrar sem aviso a qualquer momento por erro de c√≥digo
          ou de servi√ßos dependentes, como um banco de dados externo, que iremos
          usar. Ent√£o interceptar esse erro e trat√°-lo com seguran√ßa √© uma
          jogada muito boa a se fazer, √© a√≠ que mora a import√¢ncia do
          try...catch. Veja abaixo um exemplo:
        </p>

        <pre className="bg-gray-900 text-gray-200 p-4 rounded-lg overflow-x-auto text-sm font-mono mb-4">
          <code>{codigo2}</code>
        </pre>

        <h2 className="font-black text-2xl mb-4">Async</h2>
        <p className="mb-4">
          Em JavaScript, a√ß√µes como acessar uma API, ler arquivos, ou esperar um
          tempo n√£o s√£o instant√¢neas. Se o c√≥digo esperasse essas a√ß√µes
          terminarem antes de continuar, a aplica√ß√£o travaria. Por isso, usamos
          fun√ß√µes ass√≠ncronas para lidar com essas opera√ß√µes sem travar o fluxo.
        </p>

        <h3 className="text-xl font-semibold mt-6 mb-2">
          Conceitos principais
        </h3>
        <ul className="list-disc list-inside space-y-2 mb-4">
          <li>
            {" "}
            <strong>async:</strong> declara uma fun√ß√£o como ass√≠ncrona e fa√ßa
            com que ela retorne uma Promisse (um objeto que pode existir ou n√£o,
            assim como a sua tradu√ß√£o literal sugere).
          </li>
          <li>
            {" "}
            <strong>await</strong>: espera que uma Promise seja resolvida e s√≥
            pode ser usado dentro de fun√ß√µes async.
          </li>
          <h3 className="font-black text-xl">Exemplo:</h3>
          <pre className="bg-gray-900 text-gray-200 p-4 rounded-lg overflow-x-auto text-sm font-mono mb-4">
            <code>{codigo3}</code>
          </pre>
          <h3 className="font-black text-xl">Sa√≠da:</h3>
          <p className="mb-4">
            Iniciando... <br />
            (espera 2 segundos) <br />
            Esperou 2 segundos <br />
            Finalizado 
          </p>
        </ul>
        <hr className="mt-24" />
      </section>
    </div>
  );
}
